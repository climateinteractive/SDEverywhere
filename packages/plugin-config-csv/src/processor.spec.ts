// Copyright (c) 2022 Climate Interactive / New Venture Fund

import { mkdir, readFile } from 'fs/promises'
import { dirname, join as joinPath } from 'path'
import { fileURLToPath } from 'url'

import dedent from 'dedent'
import temp from 'temp'
import { afterAll, beforeAll, describe, expect, it } from 'vitest'

import type { BuildOptions, UserConfig } from '@sdeverywhere/build'
import { build } from '@sdeverywhere/build'

import type { ConfigOptions } from './processor'
import { configProcessor } from './processor'

const __dirname = dirname(fileURLToPath(import.meta.url))

interface TestEnv {
  projDir: string
  corePkgDir: string
  buildOptions: BuildOptions
}

async function prepareForBuild(optionsFunc: (corePkgDir: string) => ConfigOptions): Promise<TestEnv> {
  const baseTmpDir = await temp.mkdir('sde-plugin-config-csv')
  console.log(baseTmpDir)
  const projDir = joinPath(baseTmpDir, 'proj')
  await mkdir(projDir)
  const corePkgDir = joinPath(projDir, 'core-package')
  await mkdir(corePkgDir)

  const config: UserConfig = {
    rootDir: projDir,
    modelFiles: [],
    modelSpec: configProcessor(optionsFunc(corePkgDir))
  }

  const buildOptions: BuildOptions = {
    config,
    logLevels: ['info'],
    sdeDir: '',
    sdeCmdPath: ''
  }

  return {
    projDir,
    corePkgDir,
    buildOptions
  }
}

describe('configProcessor', () => {
  beforeAll(() => {
    temp.track()
  })

  afterAll(() => {
    temp.cleanupSync()
  })

  it('should throw an error if the config directory does not exist', async () => {
    const configDir = '/___does-not-exist___'
    const testEnv = await prepareForBuild(() => ({
      config: configDir
    }))
    const result = await build('production', testEnv.buildOptions)
    if (result.isOk()) {
      throw new Error('Expected err result but got ok: ' + result.value)
    }
    expect(result.error.message).toBe(`The provided config dir '/___does-not-exist___' does not exist`)
  })

  it('should write to default directory structure if single out dir is provided', async () => {
    const configDir = joinPath(__dirname, '__tests__', 'config1')
    const testEnv = await prepareForBuild(corePkgDir => ({
      config: configDir,
      out: corePkgDir
    }))
    const result = await build('production', testEnv.buildOptions)
    if (result.isErr()) {
      throw new Error('Expected ok result but got: ' + result.error.message)
    }

    const modelSpecFile = joinPath(testEnv.corePkgDir, 'src', 'model', 'generated', 'model-spec.ts')
    expect(await readFile(modelSpecFile, 'utf8')).toEqual(dedent`
      // This file is generated by \`@sdeverywhere/plugin-config-csv\`; do not edit manually!
      export const startTime = 100
      export const endTime = 200
      export const inputVarIds: string[] = []
      export const outputVarIds: string[] = []\n
    `)

    // TODO: Check config specs and strings
  })

  it('should write to given directories if out paths are provided', async () => {
    const configDir = joinPath(__dirname, '__tests__', 'config1')
    const testEnv = await prepareForBuild(corePkgDir => ({
      config: configDir,
      out: {
        modelSpecsDir: joinPath(corePkgDir, 'mgen'),
        configSpecsDir: joinPath(corePkgDir, 'cgen'),
        stringsDir: joinPath(corePkgDir, 'sgen')
      }
    }))
    const result = await build('production', testEnv.buildOptions)
    if (result.isErr()) {
      throw new Error('Expected ok result but got: ' + result.error.message)
    }

    const modelSpecFile = joinPath(testEnv.corePkgDir, 'mgen', 'model-spec.ts')
    expect(await readFile(modelSpecFile, 'utf8')).toEqual(dedent`
      // This file is generated by \`@sdeverywhere/plugin-config-csv\`; do not edit manually!
      export const startTime = 100
      export const endTime = 200
      export const inputVarIds: string[] = []
      export const outputVarIds: string[] = []\n
    `)

    // TODO: Check config specs and strings
  })
})
