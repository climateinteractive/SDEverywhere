// Copyright (c) 2022 Climate Interactive / New Venture Fund

/** A variable name as used in the modeling tool. */
export type VarName = string

/**
 * Describes a model input variable.
 */
export interface InputSpec {
  /** The variable name (as used in the modeling tool). */
  varName: VarName

  /**
   * The stable input identifier.  It is recommended to set this to a value (for example, a
   * numeric string like what `plugin-config` uses) that is separate from `varName` and is
   * stable between two versions of the model.  This way, if an input variable is renamed
   * between two versions of the model, comparisons can still be performed between the two.
   * If a distinct `inputId` is not available, plugins can infer one from `varName`, but
   * note that this approach will be less resilient to renames.
   */
  inputId?: string

  /** The default value for the input. */
  defaultValue?: number

  /** The minimum value for the input. */
  minValue?: number

  /** The maximum value for the input. */
  maxValue?: number
}

/**
 * Describes a model output variable.
 */
export interface OutputSpec {
  /** The variable name (as used in the modeling tool). */
  varName: VarName
}

/**
 * Describes a model (e.g., a Vensim mdl file) and the input/output variables
 * that should be included in the model generated by SDEverywhere.
 */
export interface ModelSpec {
  /**
   * The input variables for the model.  This can either be a simple array of
   * input variable names, or an array of `InputSpec` instances.
   *
   * The builder requires only variable names for the purposes of generating
   * a model, but some plugins may require full `InputSpec` instances.
   */
  inputs: VarName[] | InputSpec[]

  /**
   * The output variables for the model.  This can either be a simple array of
   * output variable names, or an array of `OutputSpec` instances.
   */
  outputs: VarName[] | OutputSpec[]

  /**
   * The dat files that provide the data for exogenous data variables in the
   * model.
   */
  datFiles?: string[]

  /**
   * Whether to bundle a model listing with the generated model.
   *
   * If undefined, defaults to false.
   *
   * When this is true, a model listing will be bundled with the generated
   * model to allow the `runtime` package to resolve variables that are
   * referenced by name or identifier.  This listing will increase the size
   * of the generated model, so it is recommended to set this to true only
   * if it is needed.
   */
  bundleListing?: boolean

  /**
   * Whether to allow lookups to be overridden at runtime using `setLookup`.
   *
   * If undefined or false, the generated model will implement `setLookup`
   * as a no-op, meaning that lookups cannot be overridden at runtime.
   *
   * If true, all lookups in the generated model will be available to be
   * overridden.
   *
   * If an array is provided, only those variable names in the array will
   * be available to be overridden.
   */
  customLookups?: boolean | VarName[]

  /**
   * Whether to allow for capturing the data for arbitrary variables at
   * runtime (including variables that are not configured in the `outputs`
   * array).
   *
   * If undefined or false, the generated model will implement `storeOutput`
   * as a no-op, meaning that the data for arbitrary variables cannot be
   * captured at runtime.
   *
   * If true, all variables in the generated model will be available to be
   * captured at runtime.
   *
   * If an array is provided, only those variable names in the array will
   * be available to be captured at runtime.
   */
  customOutputs?: boolean | VarName[]

  /** Additional options included with the SDE `spec.json` file. */
  // TODO: Remove references to `spec.json`
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  options?: { [key: string]: any }
}

/**
 * Describes a model (e.g., a Vensim mdl file) and the input/output variables
 * that should be included in the model generated by SDEverywhere.  This is
 * largely the same as the `ModelSpec` interface, except this one has been
 * fully resolved (paths have been validated, input and output variables have
 * been checked, etc).  This is the spec object that will be passed to plugin
 * functions.
 */
export interface ResolvedModelSpec {
  /**
   * The input variable names for the model.  This will be defined regardless
   * of whether `ModelSpec.inputs` was defined as an array of variable names
   * or an array of `InputSpec` instances.  (The input variable names are
   * derived from the `InputSpec` instances as needed.)
   */
  inputVarNames: VarName[]

  /**
   * The input variable specs for the model.
   */
  inputs: InputSpec[]

  /**
   * The output variable names for the model.  This will be defined regardless
   * of whether `ModelSpec.outputs` was defined as an array of variable names
   * or an array of `OutputSpec` instances.  (The output variable names are
   * derived from the `OutputSpec` instances as needed.)
   */
  outputVarNames: VarName[]

  /**
   * The output variable specs for the model.
   */
  outputs: OutputSpec[]

  /**
   * The dat files that provide the data for exogenous data variables in the
   * model.
   */
  datFiles: string[]

  /**
   * Whether to bundle a model listing with the generated model.
   *
   * When this is true, a model listing will be bundled with the generated
   * model to allow the `runtime` package to resolve variables that are
   * referenced by name or identifier.  This listing will increase the size
   * of the generated model, so it is recommended to set this to true only
   * if it is needed.
   */
  bundleListing: boolean

  /**
   * Whether to allow lookups to be overridden at runtime using `setLookup`.
   *
   * If false, the generated model will contain a `setLookup` function that
   * throws an error, meaning that lookups cannot be overridden at runtime.
   *
   * If true, all lookups in the generated model will be available to be
   * overridden.
   *
   * If an array is provided, only those variable names in the array will
   * be available to be overridden.
   */
  customLookups: boolean | VarName[]

  /**
   * Whether to allow for capturing the data for arbitrary variables at
   * runtime (including variables that are not configured in the `outputs`
   * array).
   *
   * If false, the generated model will contain a `storeOutput` function
   * that throws an error, meaning that the data for arbitrary variables
   * cannot be captured at runtime.
   *
   * If true, all variables in the generated model will be available to be
   * captured at runtime.
   *
   * If an array is provided, only those variable names in the array will
   * be available to be captured at runtime.
   */
  customOutputs: boolean | VarName[]

  /** Additional options included with the SDE `spec.json` file. */
  // TODO: Remove references to `spec.json`
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  options?: { [key: string]: any }
}
