// Copyright (c) 2023 Climate Interactive / New Venture Fund

import type { ComparisonConfig } from '../config/comparison-config'
import type { ComparisonReport, ComparisonSummary, ComparisonTestSummary } from './comparison-report-types'

/**
 * Convert a full `ComparisonReport` to a simplified `ComparisonSummary` that includes
 * the minimum set of fields needed to keep the file smaller when there are many
 * reported differences.  This only includes comparison results for which there
 * is a non-zero `maxDiff` value.
 *
 * @param comparisonReport The full comparison report.
 * @return The terse summary.
 */
export function comparisonSummaryFromReport(comparisonReport: ComparisonReport): ComparisonSummary {
  const terseSummaries: ComparisonTestSummary[] = []

  for (const r of comparisonReport.testReports) {
    if (r.diffReport.validity === 'both' && r.diffReport.maxDiff > 0) {
      terseSummaries.push({
        s: r.scenarioKey,
        d: r.datasetKey,
        md: r.diffReport.maxDiff
      })
    }
  }

  return {
    testSummaries: terseSummaries,
    perfReportL: comparisonReport.perfReportL,
    perfReportR: comparisonReport.perfReportR
  }
}

/**
 * Restore the full set of summaries that was generated by `runComparison` (one summary
 * for each scenario/dataset pairing based on the `ComparisonConfig`).
 *
 * @param comparisonConfig The config that contains the scenarios used to reconstruct the
 * full set of summaries.
 * @param terseSummaries The set of terse summaries for comparisons that produced a
 * non-zero `maxDiff` result.
 */
export function restoreFromTerseSummaries(
  comparisonConfig: ComparisonConfig,
  terseSummaries: ComparisonTestSummary[]
): ComparisonTestSummary[] {
  // Put the provided summaries in a map for faster lookup
  const existingSummaries: Map<string, ComparisonTestSummary> = new Map()
  for (const summary of terseSummaries) {
    const key = `${summary.s}::${summary.d}`
    existingSummaries.set(key, summary)
  }

  // Get the full set of scenario/dataset pairs
  const allTestSummaries: ComparisonTestSummary[] = []
  for (const scenario of comparisonConfig.scenarios.getAllScenarios()) {
    const datasetKeys = comparisonConfig.datasets.getDatasetKeysForScenario(scenario)
    for (const datasetKey of datasetKeys) {
      // If we have a summary in the array that was passed in, it means
      // the `maxDiff` was non-zero, so include that value, otherwise
      // assume zero
      const key = `${scenario.key}::${datasetKey}`
      const existingSummary = existingSummaries.get(key)
      const maxDiff = existingSummary?.md || 0
      allTestSummaries.push({
        s: scenario.key,
        d: datasetKey,
        md: maxDiff
      })
    }
  }

  return allTestSummaries
}
