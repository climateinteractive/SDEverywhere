// Copyright (c) 2024 Climate Interactive / New Venture Fund

import { type LookupDef, type VarSpec } from '../_shared'
import type { RunnableModel } from '../runnable-model'
import { BaseRunnableModel } from '../runnable-model/base-runnable-model'

import { getJsModelFunctions, type JsModelFunctionContext, type JsModelFunctions } from './js-model-functions'

/**
 * An interface that exposes the functions of a JavaScript model generated by the
 * SDEverywhere transpiler.  This allows for running the model with a given set of
 * input values, which will produce a set of output values.
 *
 * This is a low-level interface that most developers will not need to interact
 * with directly.  Developers should instead use the `ModelRunner` interface to
 * interact with a generated model.  Use `createSynchronousModelRunner` to create
 * a synchronous `ModelRunner`, or `spawnAsyncModelRunner` to create an asynchronous
 * `ModelRunner`.
 *
 * @beta NOTE: The properties and methods exposed in this interface are meant for
 * internal use only, and are subject to change in coordination with the code
 * generated by the `@sdeverywhere/compile` package.
 */
export interface JsModel {
  readonly kind: 'js'

  readonly outputVarIds: string[]
  readonly outputVarNames: string[]

  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  readonly modelListing?: /*ModelListingSpecs*/ any

  /** @hidden */
  getInitialTime(): number
  /** @hidden */
  getFinalTime(): number
  /** @hidden */
  getTimeStep(): number
  /** @hidden */
  getSaveFreq(): number

  /** @hidden */
  getModelFunctions(): JsModelFunctions
  /** @hidden */
  setModelFunctions(functions: JsModelFunctions): void

  /** @hidden */
  setTime(time: number): void
  /** @hidden */
  setInputs(inputValue: (index: number) => number): void

  /** @hidden */
  setLookup(varSpec: VarSpec, points: Float64Array): void

  /** @hidden */
  storeOutputs(storeValue: (value: number) => void): void
  /** @hidden */
  storeOutput(varSpec: VarSpec, storeValue: (value: number) => void): void

  /** @hidden */
  initConstants(): void
  /** @hidden */
  initLevels(): void
  /** @hidden */
  evalAux(): void
  /** @hidden */
  evalLevels(): void
}

/**
 * Create a `RunnableModel` from a given `JsModel` that was generated by the
 * SDEverywhere transpiler.
 *
 * @hidden This is not part of the public API; only the top-level `createRunnableModel`
 * function is exposed in the public API.
 */
export function initJsModel(model: JsModel): RunnableModel {
  // Install the default implementation of model functions if not already provided
  let fns = model.getModelFunctions()
  if (fns === undefined) {
    fns = getJsModelFunctions()
    model.setModelFunctions(fns)
  }

  // Get the control variable values.  Once the first 4 control variables are known,
  // we can compute `numSavePoints` here.
  const initialTime = model.getInitialTime()
  const finalTime = model.getFinalTime()
  const timeStep = model.getTimeStep()
  const saveFreq = model.getSaveFreq()
  const numSavePoints = Math.round((finalTime - initialTime) / saveFreq) + 1

  return new BaseRunnableModel({
    startTime: initialTime,
    endTime: finalTime,
    saveFreq: saveFreq,
    numSavePoints,
    outputVarIds: model.outputVarIds,
    modelListing: model.modelListing,
    onRunModel: (inputs, outputs, options) => {
      runJsModel(
        model,
        initialTime,
        finalTime,
        timeStep,
        saveFreq,
        numSavePoints,
        inputs,
        outputs,
        options?.outputIndices,
        options?.lookups,
        undefined
      )
    }
  })
}

function runJsModel(
  model: JsModel,
  initialTime: number,
  finalTime: number,
  timeStep: number,
  saveFreq: number,
  numSavePoints: number,
  inputs: Float64Array | undefined,
  outputs: Float64Array,
  outputIndices: Int32Array | undefined,
  lookups: LookupDef[] | undefined,
  stopAfterTime: number | undefined
): void {
  // Initialize time with the required `INITIAL TIME` control variable
  let time = initialTime
  model.setTime(time)

  // Configure the functions.  The function context makes the control variable values
  // available to certain functions that depend on those values.
  const fnContext: JsModelFunctionContext = {
    timeStep,
    currentTime: time
  }
  model.getModelFunctions().setContext(fnContext)

  // Initialize constants to their default values
  model.initConstants()

  // Apply lookup overrides, if provided
  if (lookups !== undefined) {
    for (const lookupDef of lookups) {
      model.setLookup(lookupDef.varRef.varSpec, lookupDef.points)
    }
  }

  if (inputs?.length > 0) {
    // Set the user-defined input values.  This needs to happen after `initConstants`
    // since the input values will override the default constant values.
    model.setInputs(index => inputs[index])
  }

  // Initialize level variables
  model.initLevels()

  // Set up a run loop using a fixed number of time steps
  // TODO: For now we run up to and including `finalTime` (even when `stopAfterTime`
  // is defined), storing undefined for values after passing the `stopAfterTime`.
  // We should change this to instead stop running the model after passing the
  // `stopAfterTime` and have a simpler loop that stores undefined values.
  const lastStep = Math.round((finalTime - initialTime) / timeStep)
  const stopTime = stopAfterTime !== undefined ? stopAfterTime : finalTime
  let step = 0
  let savePointIndex = 0
  let outputVarIndex = 0
  while (step <= lastStep) {
    // Evaluate aux variables
    model.evalAux()

    if (time % saveFreq < 1e-6) {
      outputVarIndex = 0
      const storeValue = (value: number) => {
        // Write each value into the preallocated buffer; each variable has a "row" that
        // contains `numSavePoints` values, one value for each save point
        const outputBufferIndex = outputVarIndex * numSavePoints + savePointIndex
        outputs[outputBufferIndex] = time <= stopTime ? value : undefined
        outputVarIndex++
      }
      if (outputIndices !== undefined) {
        // Store the outputs as specified in the current output indices buffer
        let indexBufferOffset = 0
        const outputCount = outputIndices[indexBufferOffset++]
        for (let i = 0; i < outputCount; i++) {
          const varIndex = outputIndices[indexBufferOffset++]
          const subCount = outputIndices[indexBufferOffset++]
          let subscriptIndices: Int32Array
          if (subCount > 0) {
            subscriptIndices = outputIndices.subarray(indexBufferOffset, indexBufferOffset + subCount)
            indexBufferOffset += subCount
          }
          const varSpec: VarSpec = {
            varIndex,
            subscriptIndices
          }
          model.storeOutput(varSpec, storeValue)
        }
      } else {
        // Store the normal outputs
        // TODO: In the case of a synchronous `ModelRunner`, we can access the `Outputs`
        // instance directly and write directly into that instead of into a typed array.
        // We can update `BaseRunnableModel` to expose the `Outputs` instance, and if it
        // is defined, we can use the following code to write into the `Outputs`.
        // if (outputsInstance) {
        //   model.storeOutputs(value => {
        //     // Write each value into the preallocated buffer; each variable has a "row" that
        //     // contains `numSavePoints` values, one value for each save point
        //     const series = outputsInstance.varSeries[outputVarIndex]
        //     series.points[savePointIndex].y = value
        //     outputVarIndex++
        //   })
        // } else {
        model.storeOutputs(storeValue)
        // }
      }
      savePointIndex++
    }

    if (step === lastStep) {
      // This is the last step, so we are done
      break
    }

    // Propagate levels for the next time step
    model.evalLevels()

    // Advance time by one step
    time += timeStep
    model.setTime(time)
    fnContext.currentTime = time
    step++
  }
}
