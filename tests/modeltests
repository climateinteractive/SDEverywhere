#!/bin/bash

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
PROJ_DIR=$SCRIPT_DIR/..
MODELS_DIR=$PROJ_DIR/models

# If GEN_FORMAT is not set, default to "c"
if [[ -z $GEN_FORMAT ]]; then
  export GEN_FORMAT=c
fi

set -e # fail on error
#set -x

cd "$PROJ_DIR"

# Use the local sde command.
SDE_MAIN="$PROJ_DIR/packages/cli/src/main.js"

# Compile and run the given model, then compare the outputs produced by SDE
# to those produced by Vensim.
function test {
  MODEL=$1
  ARGS_MSG=$2
  echo "Testing the $MODEL model $ARGS_MSG"
  MODEL_DIR=$MODELS_DIR/$MODEL

  # Clean up before
  node "$SDE_MAIN" clean --modeldir "$MODEL_DIR"

  # Test (only if there is a dat file to compare against)
  if [[ -f $MODEL_DIR/${MODEL}.dat ]]; then
    SPEC_FILE=$MODEL_DIR/${MODEL}_spec.json
    if [[ -f $SPEC_FILE ]]; then
      TEST_ARGS="--spec $SPEC_FILE"
    else
      TEST_ARGS=
    fi
    # Reduce comparison precision for models that cannot reproduce Vensim results.
    PRECISION="1e-4"
    if [[ $MODEL == "allocate" ]]; then
      PRECISION="1e-2"
    fi
    node "$SDE_MAIN" test $TEST_ARGS --genformat=$GEN_FORMAT -p $PRECISION "$MODEL_DIR/$MODEL"
  fi

  # Run additional script to validate output
  VALIDATE_SCRIPT=$MODEL_DIR/${MODEL}_check.sh
  if [[ -f $VALIDATE_SCRIPT ]]; then
    if [[ $MODEL == "prune" && $GEN_FORMAT == "js" ]]; then
      echo "Skipping validation checks for prune model (not yet updated for JS target)"
    else
      echo "Performing additional validation checks on $MODEL"
      $VALIDATE_SCRIPT
    fi
  fi

  # Clean up after (unless this is being run as part of the "compare" function,
  # in which case we keep the build directory around)
  if [[ -z $ARGS_MSG ]]; then
    node "$SDE_MAIN" clean --modeldir "$MODEL_DIR"
  fi

  echo
}

# Run a comparison for a given model that runs the "test" function twice,
# once with the default set of arguments, and once with a different set of
# arguments.  After completing the two model runs, compare the generated
# code for both models and fail if there are any differences.
function compare {
  MODEL=$1
  MODEL_DIR=$MODELS_DIR/$MODEL

  COMPARE_DIR=$MODEL_DIR/compare
  MODEL_OLD_C=$COMPARE_DIR/${MODEL}_old.c
  MODEL_NEW_C=$COMPARE_DIR/${MODEL}_new.c
  mkdir -p $COMPARE_DIR

  # TODO: We no longer have an environment variable to switch between the old
  # and new parser implementations, so this code is not useful in its current
  # form but is being left here as a guide for the future in case we want to
  # be able to compare compiler output for two different code paths
  #export SDE_NONPUBLIC_USE_NEW_PARSE=0
  test $1 "with legacy parser"
  cp $MODEL_DIR/build/$MODEL.c $MODEL_OLD_C

  #export SDE_NONPUBLIC_USE_NEW_PARSE=1
  test $1 "with new parser"
  cp $MODEL_DIR/build/$MODEL.c $MODEL_NEW_C

  echo "Comparing generated code for $MODEL"
  git diff -w --no-index $MODEL_OLD_C $MODEL_NEW_C
  echo "No differences detected"
  echo
  echo "===================="
  echo
}

if [[ $1 == "compare" ]]; then
  # Run comparison tests on one or more models, comparing the code generated by
  # the compiler under two sets of arguments, and comparing the model outputs
  # against saved Vensim data
  cmd=compare
  mdl=$2
else
  # Run basic tests on one or more models, comparing the model outputs against
  # saved Vensim data
  cmd=test
  mdl=$1
fi

if [[ -n $mdl ]]; then
  # Test the specified model
  $cmd $mdl
else
  # Test all models in the models directory
  for m in $(ls "$MODELS_DIR"); do
    # Skip node_modules directory and other non-model files like package.json
    if [[ $m == "node_modules" || ! -d "$MODELS_DIR/$m" ]]; then
      continue
    fi

    if [[ $GEN_FORMAT == "js" ]]; then
      # Skip tests for models that are not yet supported for JS target
      if [[ $m == "allocate" || $m == delayfixed* || $m == "depreciate" || $m == "gamma_ln" ]]; then
          echo "Skipping test for $m (not yet supported for JS target)"
          echo
          continue
      fi
    fi

    if [[ $cmd == "compare" ]]; then
      # Skip comparison tests for some models that have slightly different code
      # generated by old and new implementations
      if [[ $m == "except" || $m == "flatten" || $m == "preprocess" || $m == "prune" || $m == "sample" ]]; then
        echo "Skipping comparison test for $m"
        echo
        echo "===================="
        echo
        continue
      fi
    fi
    $cmd $m
  done
fi
